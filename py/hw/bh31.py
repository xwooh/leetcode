"""
题目描述：

公司分月饼，m个员工，买了n个月饼，m <= n，每个员工至少分一个月饼，但是也可以分到多个，

单人分到最多月饼的个数是Max1，单人分到第二多月饼个数是Max2。

但需要满足Max1-Max2 <= 3，单人分到第n-1多月饼个数是Max(n-1)，
单人分到第n多月饼个数是Max(n), 想要满足Max(n-1) - Max(n) <= 3，问有多少种分月饼的方法？

输入描述：

每一行输入m，n，表示m个员工，n个月饼，m <=n

输出描述：

输出有多少种分法

示例1：

输入

2 4

输出

2

说明

4=1+3

4=2+2

注意：1+3和3+1要算成同一种分法

示例2：

输入

3 5

输出

2

说明

5=1+1+3

5=1+2+3

示例3：

输入

3 12

输出

6

说明

满足要求的6种分法：

1、12 = 1 + 1 + 10 （Max1=10， Max2=1，不满足Max1-Max2 <= 3的约束）
2、12 = 1 + 2 + 9 （Max1=9，Max2=2，不满足Max1-Max2 <= 3的约束）
3、12 = 1 + 3 + 8 （Max1=8，Max2=3，不满足Max1-Max2 <= 3的约束）
5、12 = 1 + 5 + 6 （Max1=6，Max2=5，Max3=1， 不满足要求）
6、12 = 2 + 2 + 8 （Max1=8，Max2=2，不满足要求）
7、12 = 2 + 3 + 7 （Max1=7，Max2=3，不满足要求）

4、12 = 1 + 4 + 7 （Max1=7，Max2=4，Max3=1， 满足要求）
8、12 = 2 + 4 + 6 （Max1=6，Max2=4，Max3=2， 满足要求）
9、12 = 2 + 5 + 5 （Max1=5，Max2=2 满足要求）
10、12 = 3 + 3 + 6 （Max1=6，Max2=3 满足要求）
11、12 = 3 + 4 + 5 （Max1=5，Max2=4，Max3=3 满足要求）
12 = 4 + 4 + 4 （Max1=4，满足要求）
"""


def calc(n: int, m: int, i: int) -> int:
    """
    n: n 个人分月饼
    m: m 个月饼
    i: 上一个人分 i 个月饼
    """
    if n == 1:
        # 这个人最少分 i 个，但是最多只能分 i + 3 个
        # 否则无法分配
        return int(i <= m <= i + 3)

    count = 0

    # 开始分月饼
    # 下一轮第一个分得月饼的人的月饼数 j
    #   不能分得超过 m//n 而且也不能超过前一个人 i+3
    j = i
    while j <= m // n and j <= i + 3:
        count += calc(n - 1, m - j, j)
        j += 1

    return count


def count(n: int, cn: int) -> int:
    """
    对于第一个人分得的月饼数 x 必须在区间 [1, cn // n] 内
    因为必须分得，而且不能超过 cn // n，因为第一个人数分得最少得，所以不能超过 cn // n，不然不是分得最少的人
    """

    return calc(n, cn, 1)


if __name__ == "__main__":
    print(count(2, 4))  # 2
    print(count(3, 5))  # 2
    print(count(3, 12))  # 6
